apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.jetbrains.dokka-android'


android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29

        resValue "string", "library_biometricauth_libraryVersion", libraryVersion
    }

    // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
    libraryVariants.all {
        it.generateBuildConfig.enabled = false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    api 'androidx.appcompat:appcompat:1.2.0'


    implementation 'androidx.biometric:biometric:1.1.0'

    api 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
}

// publish using: ./gradlew clean biometricauth:build biometricauth:test biometricauth:sourcesJar biometricauth:bintrayUpload

group = publishedGroupId
version = libraryVersion

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId publishedGroupId
            artifactId artifact

            name libraryName
            description libraryDescription
            url siteUrl

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }

        pom.withXml {
            def dependenciesNode = asNode().appendNode('dependencies')

            // TODO Test, whether this is automatically done by the bintray-plugin.
            // The maven-publish plugin, which is used in combination with mavenLocal() seems to
            // not automatically add the dependencies to the pom file.

            //Add all declared 'api' dependencies to the pom.xml with 'compile'-scope
            configurations.api.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', dp.group)
                dependencyNode.appendNode('artifactId', dp.name)
                dependencyNode.appendNode('version', dp.version)
                dependencyNode.appendNode('scope', "compile")
            }
            //Add all declared 'implementation' dependencies to the pom.xml with 'runtime'-scope
            configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                // Unfortunately, configurations.implementation includes both (api and
                // implementation) dependencies, which is why we need to filter here.
                if (!configurations.api.dependencies.contains(dp)) {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dp.group)
                    dependencyNode.appendNode('artifactId', dp.name)
                    dependencyNode.appendNode('version', dp.version)
                    dependencyNode.appendNode('scope', "runtime")
                }
            }
        }
    }
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.outputDirectory
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
} catch (IOException e) {
    println("local.properties not found. This can be ignored, unless you want to publish. " + e.localizedMessage)
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        dryRun = false
        publish = true
        override = false
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
        }
    }
}